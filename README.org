#+TITLE: Emacs Configuration
#+AUTHOR: Gonzalo G. Fernández
#+PROPERTY: header-args:emacs-lisp :results silent :tangle ./init-new.el

* User Identification
 #+begin_src emacs-lisp
   (setq user-full-name "Gonzalo G. Fernández"
	 user-login-name "gonzafernan"
	 user-mail-address "fernandez.gfg@gmail.com")
 #+end_src

* Package System Setup
  The [[https://github.com/jwiegley/use-package][use-package]] macro allows to isolate package configuration in a way that is both performance-oriented and, well, tidy.
  #+begin_src emacs-lisp
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("melpa-stable" . "https://stable.melpa.org/packages/")
			     ("elpa" . "https://elpa.gnu.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")))

    (package-initialize) ; Load Emacs Lisp packages, and activate them

    (unless package-archive-contents ; Cache of the contents of all archives in 'package archives'
      (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)

    ;; 'use-package-always-ensure' causes the package(s) to be installed automatically
    ;; if not already present on your system
    (setq use-package-always-ensure t)
  #+end_src

* Startup Actions
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

* Interface Customization
  Scroll bar, tool bar and menu bar disabled
  #+begin_src emacs-lisp
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
  #+end_src

  Line wrapping and highlight line with cursor
  #+begin_src emacs-lisp
    (global-visual-line-mode t) ; line wrapping
    (global-hl-line-mode 1)     ; highlight current row
  #+end_src

  Enable line number
  #+begin_src emacs-lisp
    (column-number-mode)
    (global-display-line-numbers-mode t)
	 ;; Disable line numbers for the following modes
    (dolist (mode '(org-mode-hook
		    doc-view-mode-hook
		    term-mode-hook
		    shell-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
  #+end_src

** Custom Theme
   [[https://github.com/doomemacs/themes][doom-themes]] a theme megapack for GNU Emacs, inspired by community favorites
   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	     doom-themes-enable-italic t) ; if nil, italics is universally disabled
       (load-theme 'doom-vibrant t))
   #+end_src

   doom-theme customization:
   #+begin_src emacs-lisp
     ;; Flash the mode-line when the Emacs bell rings (i.e. an error occurs).
     ;; May not be compatible with all mode line plugins.
     (doom-themes-visual-bell-config)

     ;; Corrects and improves some of org-mode's native fontification issues.
     (doom-themes-org-config)
   #+end_src

   [[https://github.com/seagle0128/doom-modeline][doom-modeline]] a fancy and fast mode-line inspired by minimalism design
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :init (doom-modeline-mode 1))
   #+end_src

   In order to fix the icons for doom-modeline, [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is needed
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :if (display-graphic-p))
   #+end_src

** Base face setup
  #+begin_src emacs-lisp
    (custom-theme-set-faces
       'user
       '(default ((t (:family "Fira Code Retina" :height 110))))
       '(variable-pitch ((t (:family "PT Sans" :height 110 :weight regular))))
       '(fixed-pitch ((t ( :family "Fira Code Retina" :height 110)))))
  #+end_src

* Completion frontend
** Ivy
   [[https://github.com/abo-abo/swiper][Ivy]] is for quick and easy selection from a list. When Emacs prompts for a string from a list of several possible choices, Ivy springs into action to assist in narrowing and picking the right string from a vast number of choices.
   [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] comes with rich transformers for commands from ivy and counsel. It should be easy enough to define your own transformers too.
   #+begin_src emacs-lisp
     (use-package ivy
       :diminish
       :config
       (ivy-mode 1))

     (use-package ivy-rich
       :after ivy
       :init
       (ivy-rich-mode 1))
   #+end_src

** Counsel
   ivy-mode ensures that any Emacs command using completing-read-function uses ivy for completion.
   [[https://github.com/abo-abo/swiper][Counsel]] takes this further, providing versions of common Emacs commands that are customised to make the best use of Ivy. For example, counsel-find-file has some additional keybindings. Pressing DEL will move you to the parent directory.
   #+begin_src emacs-lisp
     (use-package counsel)
   #+end_src
  
* Navigation
** which-key
   [[https://github.com/justbur/emacs-which-key][which-key]] displays the key bindings following your currently entered incomplete command (a prefix) in a popup. In this configuration you can trigger which-key pressing C-h
   #+begin_src emacs-lisp
     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       ;; Allow C-h to trigger which-key before it is done automatically
       (setq which-key-show-early-on-C-h t)
       ;; make sure which-key doesn't show normally but refreshes quickly after it is
       ;; triggered.
       (setq which-key-idle-delay 10000)
       (setq which-key-idle-secondary-delay 0.05))
   #+end_src

** undo-tree
   Instead of treating undo/redo as a linear sequence of changes, undo-tree-mode treats undo history as a branching tree of changes, similar to the way Vim handles it.
   #+begin_src emacs-lisp
     (use-package undo-tree
       :diminish
       :after evil
       :config
       (evil-set-undo-system 'undo-tree)
       (global-undo-tree-mode 1))
   #+end_src

** Evil mode
   [[https://github.com/emacs-evil/evil][Evil]] is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.
   #+begin_src emacs-lisp
     (use-package evil
       :init
       (setq evil-want-integration t)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-d-scroll t)
       :config
       (evil-mode 1)
       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal))
   #+end_src

   [[https://github.com/emacsorphanage/key-chord][key-chord]] implements support for mapping a pair of simultaneously pressed keys to a command and for mapping the same key being pressed twice in quick succession to a command. Such bindings are called "key chords".
   #+begin_src emacs-lisp
     (use-package key-chord
       :config
       (key-chord-mode 1)
       (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state))
   #+end_src

** Key bindings
   Ivy-based interface to standard commands
#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "<f2> j") 'counsel-set-variable)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)
#+end_src

* Org-mode
** Face setup
   #+begin_src emacs-lisp
     (defun ggf/org-face-setup ()
       (variable-pitch-mode 1)
       (let* ((fonts-tuple
	       (cond ((x-list-fonts "PT Sans")  '(:font "PT Sans"))
		     ((x-list-fonts "Open Sans") '(:font "Open Sans"))
		     (nil (warn "Cannot find font for org headlines."))))
	      (base-font-color (face-foreground 'default nil 'default))
	      (headline        `(:inherit default :weight bold :foreground ,base-font-color)))
	 (custom-theme-set-faces
	  'user
	  `(org-level-8 ((t (,@headline ,@fonts-tuple))))
	  `(org-level-7 ((t (,@headline ,@fonts-tuple))))
	  `(org-level-6 ((t (,@headline ,@fonts-tuple))))
	  `(org-level-5 ((t (,@headline ,@fonts-tuple))))
	  `(org-level-4 ((t (,@headline ,@fonts-tuple :height 1.1))))
	  `(org-level-3 ((t (,@headline ,@fonts-tuple :height 1.15))))
	  `(org-level-2 ((t (,@headline ,@fonts-tuple :height 1.25))))
	  `(org-level-1 ((t (,@headline ,@fonts-tuple :height 1.3))))
	  `(org-document-title ((t (,@headline ,@fonts-tuple :height 1.3 :underline nil))))))
       ;; Ensure that everything that should be fixed-pitch appears that way
       ( set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
       (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
       (set-face-attribute 'org-code nil  :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-document-info nil :inherit 'fixed-pitch)
       (set-face-attribute 'org-document-info-keyword nil :inherit 'fixed-pitch))
   #+end_src

** Org-mode setup
   #+begin_src emacs-lisp
     (use-package org
       :config
       (setq org-todo-keywords
	     '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
       (setq org-image-actual-width nil)
       (ggf/org-face-setup))
   #+end_src

** Code Evaluation and Security Issues
   Don't ask confirmation before evaluating code. [[https://orgmode.org/manual/Code-Evaluation-Security.html][Need review]]
   #+begin_src emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+end_src

** Babel
   Add support for a particular language.
   #+begin_src emacs-lisp
     (org-babel-do-load-languages
      'org-babel-loadl-languages
      '(emacs-lisp . t)
      (python . t))
   #+end_src

** Structure Templates
   With just a few keystrokes, it is possible to insert empty structural blocks, such as ‘#+BEGIN_SRC’ … ‘#+END_SRC’, or to wrap existing text in such a block. [[https://orgmode.org/manual/Structure-Templates.html][More info]]
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src

* Project Management Utilities
** Magit (version control system interface)
   An interface to the version control system Git, implemented as an Emacs packaging.
   magit manual: https://magit.vc/manual/magit.html
   #+begin_src emacs-lisp
     (use-package magit)
   #+end_src
** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible). For instance - finding project files has a portable implementation written in pure Emacs Lisp without the use of GNU find (but for performance sake an indexing mechanism backed by external commands exists as well).
   Projectile has native support for using ivy as its completion system. [[https://github.com/ericdanan/counsel-projectile][Counsel-projectile]] provides further ivy integration into projectile by taking advantage of ivy's support for selecting from a list of actions and applying an action without leaving the completion session. Concretely, counsel-projectile defines replacements for existing projectile commands as well as new commands that have no projectile counterparts. A minor mode is also provided that adds key bindings for all these commands on top of the projectile key bindings.
   #+begin_src emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :pin melpa-stable
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind (:map projectile-mode-map
		   ("C-c p" . projectile-command-map))
       :init
       (setq projectile-project-seach-path '("~/Documents/")))

     (use-package counsel-projectile
       :config (counsel-projectile-mode))
   #+end_src

* Other useful tools
** Helpful
   [[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.
   #+begin_src emacs-lisp
     (use-package helpful
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))
   #+end_src
